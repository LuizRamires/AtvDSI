@page  "/TS/Game/AddDetalhe/{Game}"
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>DetalheGame</h3>
<div class="card m-3">
    <h4 class="card-header"></h4>
    <div class="card-body">
        <EditForm Model="@detalheP"OnValidSubmit="VDP">
            @*<DataAnnotationsValidator />*@
           
            <div class="form-row">
                <div class="form-group col">
                    <label>Descrição</label>
                    <InputText @bind-Value="detalheP.Descricao" class="form-control" />
                    @*<ValidationMessage For="@(() => tag.Nome)" />*@
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Estado de Conservação</label>
                    <InputText @bind-Value="detalheP.EstadodeConservacao" class="form-control" />
                    @*<ValidationMessage For="@(() => tag.Nome)" />*@
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Tempo de Uso</label>
                    <InputText @bind-Value="detalheP.TempoDeUso" class="form-control" />
                    @*<ValidationMessage For="@(() => tag.Nome)" />*@
                </div>
            </div>
            @*
            <div class="form-row">
                <div class="form-group col">
                    <label>Id do Game</label>
                    <InputNumber @bind-Value="detalheP.IdGame" class="form-control">@game.DetalheGame.IdGame</InputNumber>
                    
                </div>
            </div>
               *@
            <div class="text-center">
                <button type="submit" class="btn btn-primary mr-1">Salvar</button>
            </div>

        </EditForm>

    </div>
</div>

@code {
    private DetalheGame detalheP = new DetalheGame();
    private Game game = new Game();

    [Parameter]
    public string Game { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var gameId = Game;
        game = await Http.GetFromJsonAsync<Game>($"/Game/PegaId?id={gameId}"); //recebe um game pelo Id enviado do controller que busca no db
        detalheP.IdGame=Convert.ToInt32(gameId);    
    }

    private async Task VDP()
    {
        var d1 = await Http.PostAsJsonAsync("/DetalheGame/CDetalhe", detalheP); //manda para o controller criar uma DetalheGame por um  Json Async
    }



}