@page  "/TS/Game/EditarGame"
@page "/TS/Game/EditarGame/{Game}"
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>EditarGame</h3>

<div class="card m-3">
    <h4 class="card-header">Cadastro do Game</h4>
    <div class="card-body">
        <EditForm Model="@game" OnValidSubmit="Validacao" @onreset="Reset">
            <DataAnnotationsValidator />
            <div class="form-row">
                <div class="form-group col">
                    <label>Id</label>
                    <InputNumber @bind-Value="game.Id" class="form-control" />
                    
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Nome</label>
                    <InputText @bind-Value="game.Nome" class="form-control" />
                    
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Preço</label>
                    <InputNumber @bind-Value="game.Preco" @bind-Value:format="F2" class="form-control" />
                   
                </div>
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-primary mr-1">Salvar</button>
                <button type="reset" class="btn btn-secondary">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Game game = new Game();

    [Parameter]
    public string Game { get; set; }
    private EditContext editContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var gameId = Game;
        game = await Http.GetFromJsonAsync<Game>($"/Game/PegaId?id={gameId}"); //recebe um game pelo Id enviado do controller que busca no db
    }

    private async Task Validacao()
    {
        await Http.PutAsJsonAsync("/Game/Atualizar", game); //manda para o controller criar um game por um  Json Async
        NavigationManager.NavigateTo("TS/Game/ListarGame"); // Navega até o endereco forçando o navegador a dar reload
    }

    private void Reset()
    {
        game = new Game();
        editContext = new EditContext(game); //assim a validação nao é atualizada
    }

}
