@page "/TS/Filtro/AddTag"
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager
@*
    <h3>AddTag</h3>
    <h2> Id do Game </h2>
    <!--lista de games-->
    <!--Variavel que vai receber o game(id)-->
    <InputNumber @bind-Value="taggame.Id" class="form-control" />

    <!--Lista de Tags-->
    <!--Variavel que vai receber a tag(id)-->
    <h2> Id da TAG </h2>
    <InputNumber @bind-Value="taggame.TagId" class="form-control" />
*@

<!--mostrar os nomes-->
<div class="card m-3">
    <h4 class="card-header">Cadastro das Tags</h4>
    <div class="card-body">
        <EditForm Model="@taggame" OnValidSubmit="ValidacaoTagGame" @onreset="Reset">
            @*<DataAnnotationsValidator />*@
            @*
        <div class="form-row">
            <div class="form-group col">
                <label>Id da TAG</label>
                <InputNumber @bind-Value="taggame.TagId" class="form-control" />

            </div>
        </div>
            *@
            <div class="form-row">
                <label>Tag</label>
                <InputSelect ValueExpression="@(() => taggame.TagId)"
                             Value="@taggame.TagId"
                             ValueChanged="@((string value) => OnChangeCat(value))">
                    <option value="">Selecione a Tag</option>
                    @foreach (var item in TagList)
                    {
                        <option value="@item.TagId">@item.Nome</option>
                    }
                </InputSelect>
            </div>


            <div class="form-row">
                <label>Games</label>
                <InputSelect @bind-Value="taggame.Id">
                    <option value="">Selecione o Game</option>
                    @foreach (var game in GameList)
                    {
                        <option value="@game.Id">@game.Nome</option>
                    }
                </InputSelect>
            </div>

            @*
        <div class="form-row">
            <div class="form-group col">
                <label>Id do game</label>
                <InputNumber @bind-Value="taggame.Id" class="form-control" />

            </div>
        </div>
            *@
            <div class="text-center">
                <button type="submit" class="btn btn-primary mr-1">Salvar</button>
                <button type="reset" class="btn btn-secondary">Cancel</button>
            </div>
        </EditForm>

    </div>
</div>
@code {
    private TagGameDTO taggame = new TagGameDTO();
    private List<Tag> TagList = new List<Tag>();
    private List<TagGame> TagGameList = new List<TagGame>();
    private List<Game> GameList = new List<Game>();
    private EditContext editContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var games = await Http.GetFromJsonAsync<List<Game>>("/Game/Listar");
        foreach (var item in games)
        {
            GameList.Add(item);

        }

        var tags = await Http.GetFromJsonAsync<List<Tag>>("/Tag/ListarTAG");//Rota para o controller ir e trazer uma lista das Tags
        foreach (var item in tags)
        {
            TagList.Add(item);//adiciona cada item na TagList

        }

    }


    private async Task ValidacaoTagGame()
    {
        var tp1 = await Http.PostAsJsonAsync("/TagGame/AddTag", taggame);
        Console.WriteLine(taggame);
        NavigationManager.NavigateTo("/TS/Game/ListarGame"); // Navega até o endereco forçando o navegador a dar reload
    }

    private void Reset()
    {
        //taggame = new TagGame();
        editContext = new EditContext(taggame); //assim a validação nao é atualizada
    }

    private async Task OnChangeCat(string value)
    {
        taggame.TagId = value; //Seta o valor da Categoria no TagGameDTO
        var taggames = await Http.GetFromJsonAsync<List<TagGame>>("/TagGame/LTagGame");
        var gamesByCategory = taggames.Where(c => c.TagId == Convert.ToInt32(value));
        foreach (var item in gamesByCategory)
        {
            TagGameList.Add(item);
        }

    }
}
